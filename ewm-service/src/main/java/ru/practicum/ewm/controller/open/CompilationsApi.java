/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.practicum.ewm.controller.open;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;
import ru.practicum.ewm.controller.ApiUtil;
import ru.practicum.ewm.error.ApiError;
import ru.practicum.ewm.model.dto.CompilationDto;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.Min;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-10T18:11:12.435594+07:00[Asia/Barnaul]")
@Validated
@Tag(name = "compilations", description = "Публичный API для работы с подборками событий")
public interface CompilationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /compilations/{compId} : Получение подборки событий по его id
     * В случае, если подборки с заданным id не найдено, возвращает статус код 404
     *
     * @param compId id подборки (required)
     * @return Подборка событий найдена (status code 200)
     * or Запрос составлен некорректно (status code 400)
     * or Подборка не найдена или недоступна (status code 404)
     */
    @Operation(
            operationId = "getCompilation",
            summary = "Получение подборки событий по его id",
            description = "В случае, если подборки с заданным id не найдено, возвращает статус код 404",
            tags = {"Public: Подборки событий"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Подборка событий найдена", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CompilationDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Запрос составлен некорректно", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Подборка не найдена или недоступна", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/compilations/{compId}",
            produces = {"application/json"}
    )
    default ResponseEntity<CompilationDto> getCompilation(
            @Parameter(name = "compId", description = "id подборки", required = true, in = ParameterIn.PATH) @PathVariable("compId") Long compId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"id\" : 1, \"title\" : \"Летние концерты\", \"events\" : [ { \"annotation\" : \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\", \"category\" : { \"id\" : 1, \"name\" : \"Концерты\" }, \"confirmedRequests\" : 5, \"eventDate\" : \"2024-03-10 14:30:00\", \"id\" : 1, \"initiator\" : { \"id\" : 3, \"name\" : \"Фёдоров Матвей\" }, \"paid\" : true, \"title\" : \"Знаменитое шоу 'Летающая кукуруза'\", \"views\" : 999 }, { \"annotation\" : \"За почти три десятилетия группа 'Java Core' закрепились на сцене как группа, объединяющая поколения.\", \"category\" : { \"id\" : 1, \"name\" : \"Концерты\" }, \"confirmedRequests\" : 555, \"eventDate\" : \"2025-09-13 21:00:00\", \"id\" : 1, \"initiator\" : { \"id\" : 3, \"name\" : \"Паша Петров\" }, \"paid\" : true, \"title\" : \"Концерт рок-группы 'Java Core'\", \"views\" : 991 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /compilations : Получение подборок событий
     * В случае, если по заданным фильтрам не найдено ни одной подборки, возвращает пустой список
     *
     * @param pinned искать только закрепленные/не закрепленные подборки (optional)
     * @param from   количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size   количество элементов в наборе (optional, default to 10)
     * @return Найдены подборки событий (status code 200)
     * or Запрос составлен некорректно (status code 400)
     */
    @Operation(
            operationId = "getCompilations",
            summary = "Получение подборок событий",
            description = "В случае, если по заданным фильтрам не найдено ни одной подборки, возвращает пустой список",
            tags = {"Public: Подборки событий"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Найдены подборки событий", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CompilationDto.class)))
                    }),
                    @ApiResponse(responseCode = "400", description = "Запрос составлен некорректно", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/compilations",
            produces = {"application/json"}
    )
    default ResponseEntity<List<CompilationDto>> getCompilations(
            @Parameter(name = "pinned", description = "искать только закрепленные/не закрепленные подборки", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pinned", required = false) Boolean pinned,
            @Min(0) @Parameter(name = "from", description = "количество элементов, которые нужно пропустить для формирования текущего набора", in = ParameterIn.QUERY) @Valid @RequestParam(value = "from", required = false, defaultValue = "0") Integer from,
            @Parameter(name = "size", description = "количество элементов в наборе", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pinned\" : true, \"id\" : 1, \"title\" : \"Летние концерты\", \"events\" : [ { \"annotation\" : \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\", \"category\" : { \"id\" : 1, \"name\" : \"Концерты\" }, \"confirmedRequests\" : 5, \"eventDate\" : \"2024-03-10 14:30:00\", \"id\" : 1, \"initiator\" : { \"id\" : 3, \"name\" : \"Фёдоров Матвей\" }, \"paid\" : true, \"title\" : \"Знаменитое шоу 'Летающая кукуруза'\", \"views\" : 999 }, { \"annotation\" : \"За почти три десятилетия группа 'Java Core' закрепились на сцене как группа, объединяющая поколения.\", \"category\" : { \"id\" : 1, \"name\" : \"Концерты\" }, \"confirmedRequests\" : 555, \"eventDate\" : \"2025-09-13 21:00:00\", \"id\" : 1, \"initiator\" : { \"id\" : 3, \"name\" : \"Паша Петров\" }, \"paid\" : true, \"title\" : \"Концерт рок-группы 'Java Core'\", \"views\" : 991 } ] }, { \"pinned\" : true, \"id\" : 1, \"title\" : \"Летние концерты\", \"events\" : [ { \"annotation\" : \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\", \"category\" : { \"id\" : 1, \"name\" : \"Концерты\" }, \"confirmedRequests\" : 5, \"eventDate\" : \"2024-03-10 14:30:00\", \"id\" : 1, \"initiator\" : { \"id\" : 3, \"name\" : \"Фёдоров Матвей\" }, \"paid\" : true, \"title\" : \"Знаменитое шоу 'Летающая кукуруза'\", \"views\" : 999 }, { \"annotation\" : \"За почти три десятилетия группа 'Java Core' закрепились на сцене как группа, объединяющая поколения.\", \"category\" : { \"id\" : 1, \"name\" : \"Концерты\" }, \"confirmedRequests\" : 555, \"eventDate\" : \"2025-09-13 21:00:00\", \"id\" : 1, \"initiator\" : { \"id\" : 3, \"name\" : \"Паша Петров\" }, \"paid\" : true, \"title\" : \"Концерт рок-группы 'Java Core'\", \"views\" : 991 } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
